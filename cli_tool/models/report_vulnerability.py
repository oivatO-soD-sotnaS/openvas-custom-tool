from sqlalchemy import Column, String, Integer, Text, ForeignKey, UniqueConstraint
from sqlalchemy.orm import Session
from sqlalchemy.exc import SQLAlchemyError
from utils.db_connection import Base

class ReportVulnerability(Base):
    __tablename__ = 'report_vulnerability'

    report_vulnerability_id = Column(Integer, primary_key=True, autoincrement=True)
    report_id = Column(String(36), ForeignKey('report.report_id'), nullable=False)
    vulnerability_id = Column(Integer, ForeignKey('vulnerability.vulnerability_id'), nullable=False)
    ip = Column(String(20), nullable=False)
    hostname = Column(String(100), nullable=True)
    port = Column(String(50), nullable=True)
    protocol = Column(String(3), nullable=False)
    QoD = Column(Integer, nullable=False)
    specific_result = Column(Text, nullable=False)
    detection_method = Column(Text, nullable=False)

    __table_args__ = (
        UniqueConstraint('report_id', 'vulnerability_id', 'ip', 'hostname', 'port', 'protocol', name='uix_report_vulnerability'),  
    )

    def __repr__(self):
        return (
            f"<ReportVulnerability(report_id={self.report_id}, vuln_id={self.vuln_id}, "
            f"host='{self.host}', port='{self.port}')>"
        )

    @classmethod
    def create(cls, session: Session, **kwargs):
        try:
            new_report_vuln = cls(**kwargs)
            session.add(new_report_vuln)
            session.commit()
            return new_report_vuln
        except SQLAlchemyError as e:
            session.rollback()
            return None