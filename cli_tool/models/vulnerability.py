from sqlalchemy import Column, String, Integer, Float, Text, UniqueConstraint
from sqlalchemy.orm import Session
from sqlalchemy.exc import SQLAlchemyError
from utils.db_connection import Base

class Vulnerability(Base):
    __tablename__ = 'vulnerability'

    vulnerability_id = Column(Integer, primary_key=True, autoincrement=True)  # New auto-increment primary key
    nvt_oid = Column(String(50), nullable=False)  # Keeping the original nvt_oid field
    name = Column(String(255), nullable=False)
    cvss_base = Column(Float, nullable=True)
    severity = Column(String(50), nullable=False)
    solution_type = Column(String(50), nullable=False)
    summary = Column(Text, nullable=True)
    CVEs = Column(Text, nullable=True)
    solution = Column(Text, nullable=True)
    affected_software_os = Column(Text, nullable=True)
    vulnerability_insight = Column(Text, nullable=True)

    __table_args__ = (
        UniqueConstraint('nvt_oid', 'name', name='uix_nvt_oid_name'),  # Unique constraint on nvt_oid and name
    )

    def __repr__(self):
        return (
            f"<Vulnerability(vulnerability_id={self.vulnerability_id}, nvt_oid={self.nvt_oid}, "
            f"name='{self.name}', severity={self.severity}, cvss_base={self.cvss_base})>"
        )

    @classmethod
    def create(cls, session: Session, **kwargs):
        try:
            new_vulnerability = cls(**kwargs)
            session.add(new_vulnerability)
            session.commit()
            session.refresh(new_vulnerability)
            return new_vulnerability
        except SQLAlchemyError as e:
            session.rollback()
            return None

    @classmethod
    def get_by_name(cls, session: Session, name: str):
        return session.query(cls).filter_by(name=name).first()
